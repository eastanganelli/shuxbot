"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const firebase = require("firebase/app");
require("firebase/database");
const config_1 = require("./config");
const Mee6LevelsApi = require("mee6-levels-api");
class User {
    constructor(dsclient) {
        this.dsclient = dsclient;
        this.LVLs = [
            { minLvl: 0, maxLvl: 5, roleLVL: '674086387510673414' },
            { minLvl: 5, maxLvl: 10, roleLVL: '675185452931874836' },
            { minLvl: 10, maxLvl: 15, roleLVL: '675185597589225502' },
            { minLvl: 15, maxLvl: 20, roleLVL: '675185648466133052' },
            { minLvl: 20, maxLvl: 25, roleLVL: '675185689872039946' },
            { minLvl: 25, maxLvl: 30, roleLVL: '675185738815373312' },
            { minLvl: 30, maxLvl: 35, roleLVL: '675185783673454622' },
            { minLvl: 35, maxLvl: 40, roleLVL: '675185839772270612' },
            { minLvl: 40, maxLvl: 500, roleLVL: '675185892276699141' },
        ];
    }
    lvlUP(uid) {
        this.getMyProfile(uid).then((myPoints) => {
            for (let i = 0; i < this.LVLs.length; i++) {
                if (myPoints >= ((this.LVLs[i].minLvl) * 1000) && myPoints < ((this.LVLs[i].maxLvl) * 1000)) {
                    const myServer = this.dsclient.guilds.get(config_1.serverID);
                    const User_ = myServer.fetchMember(uid);
                    if (!(User_.roles.has(String(this.LVLs[i].roleLVL)))) {
                        User_.addRole(String(this.LVLs[i].roleLVL));
                        if (User_.roles.has(String(this.LVLs[i - 1].roleLVL)))
                            User_.removeRole(String(this.LVLs[i].roleLVL));
                    }
                }
            }
        });
    }
    eleccionesWinners() {
        const elecFB = firebase.database().ref('/elecciones');
        let votaciones = new Array(0);
        elecFB.once('value', snapshot => {
            snapshot.forEach(snap => {
                let auxElec = { idElecto: null, idVotantes: 0 };
                auxElec.idElecto = snap.key;
                snap.forEach(voto => {
                    auxElec.idVotantes++;
                });
                votaciones.push(auxElec);
            });
            this.ponsacMonthRol(votaciones);
        });
    }
    ponsacMonthRol(votos) {
    }
    asignarlvls(dsID) {
        let LVLs = [
            { minLvl: 0, maxLvl: 5, roleLVL: '674086387510673414' },
            { minLvl: 5, maxLvl: 10, roleLVL: '675185452931874836' },
            { minLvl: 10, maxLvl: 15, roleLVL: '675185597589225502' },
            { minLvl: 15, maxLvl: 20, roleLVL: '675185648466133052' },
            { minLvl: 20, maxLvl: 25, roleLVL: '675185689872039946' },
            { minLvl: 25, maxLvl: 30, roleLVL: '675185738815373312' },
            { minLvl: 30, maxLvl: 35, roleLVL: '675185783673454622' },
            { minLvl: 35, maxLvl: 40, roleLVL: '675185839772270612' },
            { minLvl: 40, maxLvl: 500, roleLVL: '675185892276699141' },
        ];
        const SHUX = this.dsclient.guilds.get(config_1.serverID);
        const shuxMEM = SHUX.members.get(dsID);
        {
            for (let i = 1; i < LVLs.length; i++) {
                if (shuxMEM.roles.has(LVLs[i].roleLVL)) {
                    if (shuxMEM.roles.has(LVLs[0].roleLVL)) {
                        shuxMEM.removeRole(LVLs[i].roleLVL);
                    }
                    return false;
                }
            }
            shuxMEM.addRole(LVLs[0].roleLVL);
        }
        Mee6LevelsApi.getUserXp(config_1.serverID, dsID).then((meeUser) => {
            const kValue = 1000;
            for (let i = 0; i < LVLs.length; i++) {
                if (meeUser.level >= LVLs[i].minLvl && meeUser.level < LVLs[i].maxLvl) {
                    shuxMEM.addRole(LVLs[i].roleLVL);
                    firebase.database().ref('/users').child(dsID).update({ points: (meeUser.level) * kValue });
                    return true;
                }
            }
            console.log(`${meeUser.tag} is at level ${meeUser.level} and rank ${meeUser.rank}.`);
        }).catch(() => { });
    }
    getMyProfile(uid) {
        return new Promise((resolve, reject) => {
            const userFB = firebase.database().ref('/users').child(uid);
            userFB.once('value', snapshot => {
                resolve({ points: snapshot.val().points, birth: snapshot.val().birth, warns: snapshot.val().warns, urlbuild: snapshot.val().urlbuild });
            }).catch(err => reject(err));
        });
    }
    setPerfil(uid) {
        const userFB = firebase.database().ref('/users').child(uid);
        userFB.set({ birth: '-', points: 0, warns: 0, urlbuild: '-' });
    }
    setaddfc(uid, fecha) {
        const userFB = firebase.database().ref('/users').child(uid);
        userFB.update({ birth: fecha });
    }
    setPCBuilf(uid, url_) {
        const userFB = firebase.database().ref('/users').child(uid);
        userFB.update({
            urlbuild: url_
        });
    }
    setVoto(uidVoter, uidElector) {
        const eleccionesFB = firebase.database().ref('/elecciones').child(uidElector);
        let votantes = new Array(0);
        eleccionesFB.once('value', snapshot => {
            snapshot.forEach(item => {
                votantes.push(item.val());
            });
            votantes.push(uidVoter);
            eleccionesFB.update(votantes);
        }).catch(() => {
            votantes.push(uidVoter);
            eleccionesFB.set(votantes);
        });
    }
    setWarn(uid) {
        firebase.database().ref('/users').child(uid).update({ warns: 1 });
    }
    updateWarn(uid, addrm) {
        this.getMyProfile(uid).then((miPerfil) => {
            console.log(miPerfil.warns);
            if ((miPerfil.warns == 0 || miPerfil.warns == undefined || miPerfil.warns == NaN) && (addrm != '-')) {
                this.setWarn(uid);
                return;
            }
            {
                let sum = miPerfil.warns;
                switch (addrm) {
                    case '+': {
                        sum += 1;
                        break;
                    }
                    case '-': {
                        if (sum > 0)
                            sum -= 1;
                        break;
                    }
                }
                firebase.database().ref('/users').child(uid).update({ warns: sum });
            }
        }).catch(() => { });
    }
}
exports.User = User;
//# sourceMappingURL=data:application/json;base64,