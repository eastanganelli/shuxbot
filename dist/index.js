"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Discord = require("discord.js");
const firebase = require("firebase/app");
require("firebase/database");
require("firebase/auth");
const config_1 = require("./config");
const msg_1 = require("./msg");
const Mee6LevelsApi = require("mee6-levels-api");
exports.dsclient = new Discord.Client();
let app = firebase.initializeApp(config_1.firebaseConfig);
exports.dsclient.on("ready", () => {
    console.log("Ready to go!!!");
    firebase.auth().signInWithEmailAndPassword(config_1.db.user, config_1.db.pass).then(() => { console.log('BOT DB Connected'); }).catch(Err => { console.log(Err); });
});
exports.dsclient.on("guildMemberAdd", member => {
    member.addRole('674086387510673414');
});
exports.dsclient.on('guildMemberRemove', member => {
});
exports.dsclient.on("message", msg => {
    let msg_ = new msg_1.MSGshux(exports.dsclient);
    msg_.getMSG(msg);
    if (!(msg.author.bot))
        asignarlvls(msg.author.id);
});
exports.dsclient.on('messageReactionAdd', (reaction, user) => __awaiter(void 0, void 0, void 0, function* () { }));
exports.dsclient.on('messageReactionRemove', (reaction, user) => __awaiter(void 0, void 0, void 0, function* () { }));
exports.dsclient.on('voiceStateUpdate', (oldMember, newMember) => { });
exports.dsclient.on("presenceUpdate", (oldMember, newMember) => {
    if (oldMember.presence.status !== newMember.presence.status) {
        if (!(newMember.roles.has('674086387510673414'))) {
            newMember.addRole('674086387510673414');
        }
    }
});
exports.dsclient.login(config_1.config.token);
function asignarlvls(dsID) {
    let LVLs = [
        { minLvl: 0, maxLvl: 5, roleLVL: '674086387510673414' },
        { minLvl: 5, maxLvl: 10, roleLVL: '675185452931874836' },
        { minLvl: 10, maxLvl: 15, roleLVL: '675185597589225502' },
        { minLvl: 15, maxLvl: 20, roleLVL: '675185648466133052' },
        { minLvl: 20, maxLvl: 25, roleLVL: '675185689872039946' },
        { minLvl: 25, maxLvl: 30, roleLVL: '675185738815373312' },
        { minLvl: 30, maxLvl: 35, roleLVL: '675185783673454622' },
        { minLvl: 35, maxLvl: 40, roleLVL: '675185839772270612' },
        { minLvl: 40, maxLvl: 500, roleLVL: '675185892276699141' },
    ];
    const SHUX = exports.dsclient.guilds.get(config_1.serverID);
    const shuxMEM = SHUX.members.get(dsID);
    {
        for (let i = 1; i < LVLs.length; i++) {
            if (shuxMEM.roles.has(LVLs[i].roleLVL)) {
                return null;
            }
        }
        shuxMEM.addRole(LVLs[0].roleLVL);
    }
    Mee6LevelsApi.getUserXp(config_1.serverID, dsID).then((meeUser) => {
        const kValue = 1000;
        for (let i = 0; i < LVLs.length; i++) {
            if (meeUser.level >= LVLs[i].minLvl && meeUser.level < LVLs[i].maxLvl) {
                shuxMEM.addRole(LVLs[i].roleLVL);
                firebase.database().ref('/users').child(dsID).update({ points: (meeUser.level) * kValue });
            }
        }
        console.log(`${meeUser.tag} is at level ${meeUser.level} and rank ${meeUser.rank}.`);
    }).catch(() => { });
}
exports.asignarlvls = asignarlvls;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFQSxzQ0FBc0M7QUFDdEMseUNBQXlDO0FBQ3pDLDZCQUEyQjtBQUMzQix5QkFBdUI7QUFDdkIscUNBQWdFO0FBSWhFLCtCQUFnQztBQUloQyxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUdwQyxRQUFBLFFBQVEsR0FBbUIsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDN0QsSUFBSSxHQUFHLEdBQXFCLFFBQVEsQ0FBQyxhQUFhLENBQUMsdUJBQWMsQ0FBQyxDQUFDO0FBRW5FLGdCQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7SUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzlCLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQyxXQUFFLENBQUMsSUFBSSxFQUFFLFdBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3JKLENBQUMsQ0FBQyxDQUFDO0FBQ0gsZ0JBQVEsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLEVBQUU7SUFDbkMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3pDLENBQUMsQ0FBQyxDQUFDO0FBQ0gsZ0JBQVEsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLEVBQUU7QUFFMUMsQ0FBQyxDQUFDLENB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